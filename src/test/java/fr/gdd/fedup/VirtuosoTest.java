package fr.gdd.fedup;

import fr.gdd.fedup.summary.ModuloOnSuffix;
import fr.gdd.fedup.summary.Summary;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.apache.jena.dboe.base.file.Location;
import org.apache.jena.sparql.algebra.TransformCopy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * TODO Again a try out of yet another query engine. This time,
 * TODO we want to use Virtuoso to execute the SPARQL Service
 * TODO query generated by FedUP.
 *
 * Just as {@link FedShopTest}, it requires a Virtuoso endpoint running
 * and listening on localhost:5555.
 *
 * In addition, we need to grant virtuoso the permission to process service
 * queries as described in:
 * <a href="https://github.com/dice-group/LargeRDFBench#running-sparql-11-queries">this link</a>.
 */
public class VirtuosoTest {

    private final static Logger log = LoggerFactory.getLogger(VirtuosoTest.class);
    private static final String VIRTUOSO_ENDPOINT_URL = "http://localhost:5555/sparql";

    public static FedUP fedup = new FedUP(new Summary(new ModuloOnSuffix(1),
            Location.create("./temp/fedup-h0" )))
            .modifyEndpoints(e-> "http://localhost:5555/sparql?default-graph-uri="+(e.substring(0,e.length()-1)));

    public static FedUP fedup_rsa = new FedUP(new Summary(new TransformCopy(), Location.create("./temp/fedup-id")))
            .modifyEndpoints(e-> "http://localhost:5555/sparql?default-graph-uri="+(e.substring(0,e.length()-1)));

    @Disabled
    @Test
    public void execute_a_simple_query_on_virtuoso () {
        // When the query is too complicated, i.e., it comprises too many nested operators, then we
        // get the following error returned by Virtuoso:
        // `Get Virtuoso 37000 Error SP030: SPARQL compiler, line 0: Curly brace is nested too deep at '{'`
        String serviceQuery = fedup.query(FedShopTest.Q11A);
        executeOnVirtuoso(serviceQuery);
    }

    @Disabled
    @Test
    public void execute_a_simple_query_on_virtuoso_with_rsa_which_is_smaller () {
        String serviceQuery = fedup_rsa.query(FedShopTest.Q07F);
        executeOnVirtuoso(serviceQuery);
    }

    /* ************************************************************************ */

    public static long executeOnVirtuoso(String serviceQuery) {
        serviceQuery = serviceQuery.replace("\n", "");

        String previous = null;
        while (Objects.isNull(previous) || previous.equals(serviceQuery)) {
            previous = serviceQuery;
            serviceQuery = serviceQuery.replace("  ", " "); // concise
        }

        HttpPost post = new HttpPost(VIRTUOSO_ENDPOINT_URL);
        post.setHeader("Accept", "application/sparql-results+json");

        List<NameValuePair> urlParameters = new ArrayList<>();
        urlParameters.add(new BasicNameValuePair("query", serviceQuery));
        try {
            post.setEntity(new UrlEncodedFormEntity(urlParameters));
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }

        long start = System.currentTimeMillis();
        String results = "";
        try (CloseableHttpClient httpClient = HttpClients.createDefault();
             CloseableHttpResponse response = httpClient.execute(post)) {
            results += EntityUtils.toString(response.getEntity());
        } catch (ClientProtocolException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        long elapsed = System.currentTimeMillis() - start;
        log.info("Virtuoso took {} ms to execute the query.", elapsed);
        log.debug(results);
        return elapsed;
    }

}
