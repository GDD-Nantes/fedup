package fr.gdd.fedqpl;

import fr.gdd.fedqpl.operators.Mj;
import fr.gdd.fedqpl.operators.Mu;
import fr.gdd.fedqpl.visitors.OpCloningUtil;
import fr.gdd.fedqpl.visitors.ReturningArgsOpBaseVisitor;
import fr.gdd.fedqpl.visitors.ReturningArgsOpVisitorRouter;
import fr.gdd.fedup.transforms.ToQuadsTransform;
import org.apache.jena.graph.Node;
import org.apache.jena.graph.NodeFactory;
import org.apache.jena.sparql.algebra.Op;
import org.apache.jena.sparql.algebra.op.*;
import org.apache.jena.sparql.core.Quad;
import org.apache.jena.sparql.core.Var;

import java.util.Iterator;
import java.util.Objects;
import java.util.Set;

/**
 * Transform an `Op` into one that can be executed on the source
 * assignment results, i.e. on the RDF graph generated by the execution of
 * the summary query.
 */
public class Op2SAChecker extends ReturningArgsOpBaseVisitor<Node> {

    public final ToQuadsTransform toQuads;

    public Op2SAChecker(ToQuadsTransform toQuads) {
        this.toQuads = toQuads;
    }

    @Override
    public Op visit(OpTriple triple, Node service) {
        Var g = toQuads.findVar(triple);
        return new OpQuad(Quad.create(Objects.requireNonNullElse(service, g),
                NodeFactory.createURI(g.getVarName()),
                NodeFactory.createURI("row"),
                Var.alloc("row")
                ));
    }

    @Override
    public Op visit(OpBGP bgp, Node service) {
        Set<Var> gs = toQuads.findVars(bgp);
        OpSequence sequence = OpSequence.create();
        for (Var g : gs) {
            sequence.add(
                    new OpQuad(Quad.create(Objects.requireNonNullElse(service, g),
                            NodeFactory.createURI(g.getVarName()),
                            NodeFactory.createURI("row"),
                            Var.alloc("row")
                    )));
        }

        return sequence;
    }

    @Override
    public Op visit(OpService req, Node service) {
        return new OpGraph(req.getService(), ReturningArgsOpVisitorRouter.visit(this, req.getSubOp(), req.getService()));
    }

    @Override
    public Op visit(Mu mu, Node service) {
        return switch (mu.getElements().size()) {
            case 0 -> OpNull.create();
            case 1 -> ReturningArgsOpVisitorRouter.visit(this, mu.getElements().iterator().next(), service);
            default -> {
                // wrote as nested unions
                Iterator<Op> ops = mu.getElements().iterator();
                Op left = ReturningArgsOpVisitorRouter.visit(this, ops.next(), service);
                while (ops.hasNext()) {
                    Op right = ReturningArgsOpVisitorRouter.visit(this, ops.next(), service);
                    left = OpUnion.create(left, right);
                }
                yield left;
            }
        };
    }

    @Override
    public Op visit(Mj mj, Node service) {
        return switch (mj.getElements().size()) {
            case 0 -> OpNull.create();
            case 1 -> ReturningArgsOpVisitorRouter.visit(this, mj.getElements().iterator().next(), service);
            default -> {
                // as nested joins
                Iterator<Op> ops = mj.getElements().iterator();
                Op left = ReturningArgsOpVisitorRouter.visit(this, ops.next(), service);
                while (ops.hasNext()) {
                    Op right = ReturningArgsOpVisitorRouter.visit(this, ops.next(), service);
                    left = OpJoin.create(left, right);
                }
                yield left;
            }
        };
    }

}
